import { writable, derived } from 'svelte/store';

// types: [radio, bool, num, color, text]
export const globalData = writable({
    bgColor: {
        type: 'color',
        label: 'Background',
        value: '#1C1D22',
    },
    panelExpanded: true,
    panelTransitioning: false,
    modalOpen: false,
    bgImageMode: {
        type: 'radio',
        label: 'Background mode',
        options: ['Cover', 'Tile', 'Stretch'],
        value: 'Cover',
        default: 'Cover',
    },
    bgImageScale: {
        type: 'num',
        label: 'Background tile scale',
        minVal: 2,
        maxVal: 100,
        step: 1,
        value: 50,
        default: 50,
    },
    bgImageWidth: 0,
    bgImageHeight: 0,
    bgDerivedColor: null,
});

export const bgImage = writable(null);

export const geometryData = writable({
    scaleMode: {
        type: 'radio',
        label: 'Scale mode',
        options: ['Fit texture', 'Manual'],
        value: 'Fit texture',
    },
    scale: {
        type: 'num',
        label: 'Scale',
        minVal: 0,
        maxVal: 5,
        step: 0.01,
        value: { width: 1, height: 1, depth: 1 },
        default: 1,
        prefix: { width: 'X', height: 'Y', depth: 'Z' },
    },
    cloneMode: {
        type: 'bool',
        label: 'Clone Mode',
        value: false,
    },
    cloneAmount: {
        type: 'num',
        label: 'Clone amount',
        minVal: 0,
        maxVal: 20,
        step: 1,
        value: { x: 1, y: 1 },
        prefix: { x: 'X', y: 'Y' },
        default: 1,
    },
    cloneGap: {
        type: 'num',
        label: 'Clone gap',
        minVal: 0,
        maxVal: 100,
        step: 1,
        value: { x: 20, y: 20 },
        prefix: { x: 'X', y: 'Y' },
        default: 20,
    },
});

export const environmentData = writable({
    glossy: {
        type: 'bool',
        label: 'Glossy',
        value: false,
    },
    glossyIntensity: {
        type: 'num',
        label: 'Glossy intensity',
        minVal: 0,
        maxVal: 20,
        step: 0.5,
        value: 8,
        default: 8,
    },
    spotlight: {
        type: 'bool',
        label: 'Spotlight',
        value: false,
    },
    spotlightIntensity: {
        type: 'num',
        label: 'Spotlight intensity',
        minVal: 0,
        maxVal: 5,
        step: 0.1,
        value: 3,
        default: 3,
    },
    spotlightAngle: {
        type: 'radio',
        label: 'Spotlight Angle',
        options: ['Top', 'Top Right', 'Right', 'Front', 'Top Front'],
        value: 'Top Right',
    },
    cameraFov: {
        type: 'num',
        label: 'Camera FOV',
        minVal: 10,
        maxVal: 130,
        step: 1,
        value: 20,
        default: 20,
    },
    cameraDefaultPosition: {
        type: 'radio',
        label: 'Camera default position',
        options: ['45° Top-Right', '45° Top-Left', 'Front', 'Top', 'Top-Front'],
        value: '45° Top-Right',
    },
});

export const animationData = writable({
    animate: {
        type: 'bool',
        label: 'Animate',
        value: false,
    },
    animateType: {
        type: 'radio',
        label: 'Animate type',
        options: ['Full rotate Y', 'Full rotate X', 'Full rotate Z', 'Half rotate Y', 'Half rotate X', 'Half rotate Z', 'All'],
        value: 'Full rotate Y',
    },
    speed: {
        type: 'num',
        label: 'Speed',
        minVal: -40,
        maxVal: 40,
        step: 1,
        value: 10,
        default: 10,
    },
    speedType: {
        type: 'radio',
        label: 'Speed type',
        options: ['Linear', 'Sine', 'Quad', 'Cubic', 'Quint', 'Expo'],
        value: 'Linear',
    },
    cloneDelay: {
        type: 'bool',
        label: 'Clone delay',
        value: false,
    },
    cloneDelayType: {
        type: 'radio',
        label: 'Clone delay type',
        options: ['Left to Right, Top to Bottom', 'Left to Right', 'From center', 'Top to Bottom'],
        value: 'Left to Right, Top to Bottom',
    },
    cloneDelayAmount: {
        type: 'num',
        label: 'Clone delay amount',
        minVal: 0,
        maxVal: 50,
        step: 1,
        value: 5,
        default: 5,
    },
    cameraReset: false,
    animateReset: false,
});

export const exportData = writable({
    fileType: {
        type: 'radio',
        label: 'File type',
        options: ['PNG', 'JPG'],
        value: 'PNG',
    },
    fileName: {
        type: 'text',
        label: 'File name',
        value: 'MockBoxExport',
    },
    transparentBackground: {
        type: 'bool',
        label: 'Transparent background',
        value: false,
    },
    hideCursorOverlay: {
        type: 'bool',
        label: 'Hide cursor and overlay',
        value: false,
    },
    download: false,
});

export const materialData = writable([
    {
        label: 'right',
        selected: false,
        image: null,
        rotation: 0,
        mirrorHorizontal: false,
        mirrorVertical: false,
        scaleX: 0,
        scaleY: 0,
        removed: false,
        uploaded: null,
    },
    {
        label: 'left',
        selected: false,
        image: null,
        rotation: 0,
        mirrorHorizontal: false,
        mirrorVertical: false,
        scaleX: 0,
        scaleY: 0,
        removed: false,
        uploaded: null,
    },
    {
        label: 'top',
        selected: false,
        image: null,
        rotation: 0,
        mirrorHorizontal: false,
        mirrorVertical: false,
        scaleX: 0,
        scaleY: 0,
        removed: false,
        uploaded: null,
    },
    {
        label: 'bottom',
        selected: false,
        image: null,
        rotation: 0,
        mirrorHorizontal: false,
        mirrorVertical: false,
        scaleX: 0,
        scaleY: 0,
        removed: false,
        uploaded: null,
    },
    {
        label: 'front',
        selected: false,
        image: null,
        rotation: 0,
        mirrorHorizontal: false,
        mirrorVertical: false,
        scaleX: 0,
        scaleY: 0,
        removed: false,
        uploaded: null,
    },
    {
        label: 'back',
        selected: false,
        image: null,
        rotation: 0,
        mirrorHorizontal: false,
        mirrorVertical: false,
        scaleX: 0,
        scaleY: 0,
        removed: false,
        uploaded: null,
    },
]);
